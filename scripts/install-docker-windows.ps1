# Docker Desktop Installation Script for Windows
# Requires Windows 10/11 Pro, Enterprise, or Education (64-bit)
# Requires WSL 2 or Hyper-V
# Generated by Ignition Stack Builder

# Check if running as Administrator
$isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)

if (-not $isAdmin) {
    Write-Host "ERROR: This script must be run as Administrator" -ForegroundColor Red
    Write-Host "Right-click on PowerShell and select 'Run as Administrator'" -ForegroundColor Yellow
    Read-Host "Press Enter to exit"
    exit 1
}

# Function to print colored output
function Print-Info {
    param([string]$message)
    Write-Host "[INFO] $message" -ForegroundColor Green
}

function Print-Error {
    param([string]$message)
    Write-Host "[ERROR] $message" -ForegroundColor Red
}

function Print-Warning {
    param([string]$message)
    Write-Host "[WARNING] $message" -ForegroundColor Yellow
}

# Check Windows version
$osInfo = Get-WmiObject -Class Win32_OperatingSystem
$osVersion = [System.Environment]::OSVersion.Version
$buildNumber = $osInfo.BuildNumber

Print-Info "Windows Version: $($osInfo.Caption) (Build $buildNumber)"

if ($osVersion.Major -lt 10) {
    Print-Error "Docker Desktop requires Windows 10 or later"
    Read-Host "Press Enter to exit"
    exit 1
}

# Check Windows edition
$edition = (Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion").EditionID
if ($edition -notmatch "Professional|Enterprise|Education|ServerStandard") {
    Print-Warning "Docker Desktop works best on Windows Pro, Enterprise, or Education editions"
    Print-Warning "You may need to use WSL 2 backend instead of Hyper-V"
}

# Check if Docker is already installed
$dockerInstalled = Get-Command docker -ErrorAction SilentlyContinue
if ($dockerInstalled) {
    $dockerVersion = docker --version
    Print-Warning "Docker is already installed: $dockerVersion"
    $response = Read-Host "Do you want to reinstall Docker Desktop? (y/N)"
    if ($response -ne 'y' -and $response -ne 'Y') {
        Print-Info "Skipping Docker installation"
        Read-Host "Press Enter to exit"
        exit 0
    }
}

# Enable WSL 2 (recommended for Windows 10/11)
Print-Info "Checking WSL 2 status..."
$wslFeature = Get-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux

if ($wslFeature.State -ne "Enabled") {
    Print-Info "Enabling WSL (Windows Subsystem for Linux)..."
    Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux -NoRestart
    $restartRequired = $true
}

$vmFeature = Get-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform

if ($vmFeature.State -ne "Enabled") {
    Print-Info "Enabling Virtual Machine Platform..."
    Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform -NoRestart
    $restartRequired = $true
}

if ($restartRequired) {
    Print-Warning "System restart is required to complete WSL 2 installation"
    $response = Read-Host "Do you want to restart now? (y/N)"
    if ($response -eq 'y' -or $response -eq 'Y') {
        Print-Info "Restarting system... Please run this script again after restart to complete Docker installation"
        Restart-Computer -Force
    } else {
        Print-Warning "Please restart your computer manually and run this script again to complete installation"
        Read-Host "Press Enter to exit"
        exit 0
    }
}

# Set WSL 2 as default version
Print-Info "Setting WSL 2 as default version..."
wsl --set-default-version 2 2>$null

# Download Docker Desktop installer
$dockerDesktopUrl = "https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe"
$installerPath = "$env:TEMP\DockerDesktopInstaller.exe"

Print-Info "Downloading Docker Desktop installer..."
try {
    $ProgressPreference = 'SilentlyContinue'
    Invoke-WebRequest -Uri $dockerDesktopUrl -OutFile $installerPath -UseBasicParsing
    Print-Info "Download completed"
} catch {
    Print-Error "Failed to download Docker Desktop installer: $_"
    Read-Host "Press Enter to exit"
    exit 1
}

# Install Docker Desktop
Print-Info "Installing Docker Desktop..."
Print-Info "This may take several minutes..."

try {
    $installArgs = "install --quiet --accept-license"
    Start-Process -FilePath $installerPath -ArgumentList $installArgs -Wait -NoNewWindow
    Print-Info "Docker Desktop installation completed"
} catch {
    Print-Error "Failed to install Docker Desktop: $_"
    Read-Host "Press Enter to exit"
    exit 1
}

# Clean up installer
Remove-Item $installerPath -ErrorAction SilentlyContinue

# Wait for Docker to start
Print-Info "Waiting for Docker Desktop to start..."
Print-Info "This may take a minute or two..."

$maxAttempts = 30
$attempt = 0
$dockerRunning = $false

while ($attempt -lt $maxAttempts) {
    Start-Sleep -Seconds 2
    try {
        $dockerVersion = docker --version 2>$null
        if ($dockerVersion) {
            $dockerRunning = $true
            break
        }
    } catch {
        # Continue waiting
    }
    $attempt++
    Write-Host "." -NoNewline
}

Write-Host ""

if ($dockerRunning) {
    Print-Info "Docker version: $(docker --version)"
    Print-Info "Docker Compose version: $(docker compose version)"
} else {
    Print-Warning "Docker Desktop is installed but not yet running"
    Print-Warning "Please start Docker Desktop manually from the Start menu"
}

# Test Docker installation
Print-Info "Testing Docker installation..."
try {
    docker run --rm hello-world 2>$null | Out-Null
    Print-Info "Docker test successful!"
} catch {
    Print-Warning "Docker test failed. Docker Desktop may still be starting up."
    Print-Warning "Please wait a minute and try running: docker run hello-world"
}

Print-Info ""
Print-Info "Docker Desktop installation completed successfully!"
Print-Info ""
Print-Info "Next steps:"
Print-Info "  1. Docker Desktop should start automatically on system startup"
Print-Info "  2. You can configure Docker Desktop from the system tray icon"
Print-Info "  3. Run 'docker --version' in PowerShell or CMD to verify the installation"
Print-Info "  4. Run 'docker compose version' to verify Docker Compose"
Print-Info ""
Print-Info "You can now use the Ignition Stack Builder to create and manage your containers!"
Print-Info ""

Read-Host "Press Enter to exit"
