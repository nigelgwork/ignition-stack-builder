#!/bin/bash

# Docker and Docker Compose Installation Script for Linux
# Supports Ubuntu, Debian, CentOS, RHEL, Fedora, and Arch Linux
# Generated by Ignition Stack Builder

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Check if running as root
if [ "$EUID" -ne 0 ]; then
    print_error "This script must be run as root or with sudo"
    exit 1
fi

# Detect Linux distribution
detect_distro() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        DISTRO=$ID
        VERSION=$VERSION_ID
    elif [ -f /etc/lsb-release ]; then
        . /etc/lsb-release
        DISTRO=$DISTRIB_ID
        VERSION=$DISTRIB_RELEASE
    else
        print_error "Cannot detect Linux distribution"
        exit 1
    fi

    DISTRO=$(echo "$DISTRO" | tr '[:upper:]' '[:lower:]')
    print_info "Detected distribution: $DISTRO $VERSION"
}

# Install Docker on Ubuntu/Debian
install_docker_ubuntu_debian() {
    print_info "Installing Docker on Ubuntu/Debian..."

    # Update package index
    apt-get update

    # Install prerequisites
    apt-get install -y \
        ca-certificates \
        curl \
        gnupg \
        lsb-release

    # Add Docker's official GPG key
    install -m 0755 -d /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/$DISTRO/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    chmod a+r /etc/apt/keyrings/docker.gpg

    # Set up the repository
    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/$DISTRO \
      $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

    # Update package index again
    apt-get update

    # Install Docker Engine
    apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

    print_info "Docker installed successfully on Ubuntu/Debian"
}

# Install Docker on CentOS/RHEL/Fedora
install_docker_rhel() {
    print_info "Installing Docker on CentOS/RHEL/Fedora..."

    # Install prerequisites
    yum install -y yum-utils

    # Add Docker repository
    yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

    # Install Docker Engine
    yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

    print_info "Docker installed successfully on CentOS/RHEL/Fedora"
}

# Install Docker on Arch Linux
install_docker_arch() {
    print_info "Installing Docker on Arch Linux..."

    # Update package database
    pacman -Syu --noconfirm

    # Install Docker with Compose v2 plugin
    # The 'docker' package in Arch includes docker-compose v2 as a plugin
    pacman -S --noconfirm docker docker-buildx

    # Verify docker compose v2 is available
    if docker compose version &>/dev/null; then
        print_info "Docker Compose v2 verified"
    else
        print_warning "Docker Compose v2 not found, installing docker-compose plugin"
        # Fallback: try to install compose plugin separately if needed
        pacman -S --noconfirm docker-compose &>/dev/null || true
    fi

    print_info "Docker installed successfully on Arch Linux"
}

# Main installation logic
detect_distro

# Check if Docker is already installed
if command -v docker &> /dev/null; then
    DOCKER_VERSION=$(docker --version)
    print_warning "Docker is already installed: $DOCKER_VERSION"
    read -p "Do you want to reinstall Docker? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_info "Skipping Docker installation"
    else
        print_info "Proceeding with Docker installation"
        case $DISTRO in
            ubuntu|debian)
                install_docker_ubuntu_debian
                ;;
            centos|rhel|fedora)
                install_docker_rhel
                ;;
            arch)
                install_docker_arch
                ;;
            *)
                print_error "Unsupported distribution: $DISTRO"
                exit 1
                ;;
        esac
    fi
else
    case $DISTRO in
        ubuntu|debian)
            install_docker_ubuntu_debian
            ;;
        centos|rhel|fedora)
            install_docker_rhel
            ;;
        arch)
            install_docker_arch
            ;;
        *)
            print_error "Unsupported distribution: $DISTRO"
            exit 1
            ;;
    esac
fi

# Start and enable Docker service
print_info "Starting Docker service..."
systemctl start docker
systemctl enable docker

# Verify Docker installation
if docker --version &> /dev/null; then
    print_info "Docker version: $(docker --version)"
else
    print_error "Docker installation verification failed"
    exit 1
fi

# Verify Docker Compose installation
if docker compose version &> /dev/null; then
    print_info "Docker Compose version: $(docker compose version)"
else
    print_error "Docker Compose installation verification failed"
    exit 1
fi

# Add current user to docker group (if not root)
if [ -n "$SUDO_USER" ]; then
    print_info "Adding user $SUDO_USER to docker group..."
    usermod -aG docker $SUDO_USER
    print_warning "Please log out and log back in for group changes to take effect"
fi

# Test Docker installation
print_info "Testing Docker installation..."
if docker run --rm hello-world &> /dev/null; then
    print_info "Docker test successful!"
else
    print_warning "Docker test failed. Please check the installation."
fi

print_info "Docker and Docker Compose installation completed successfully!"
print_info ""
print_info "Next steps:"
print_info "  1. Log out and log back in (or run 'newgrp docker') to use Docker without sudo"
print_info "  2. Run 'docker --version' to verify the installation"
print_info "  3. Run 'docker compose version' to verify Docker Compose v2"
print_info ""
print_info "Important: Docker Compose v2 uses 'docker compose' (with a space)"
print_info "  ✓ Correct:   docker compose up -d"
print_info "  ✗ Old v1:    docker-compose up -d"
print_info ""
print_info "You can now use the Ignition Stack Builder to create and manage your containers!"
