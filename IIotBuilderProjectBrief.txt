Project Brief – IIoT Stack Builder (Categorized, Multi-Instance, Auto-Integrated)
1. Project Goal

To create a web-based Stack Builder platform where users can:

Select applications by category (Databases, Industrial, Messaging, Monitoring, Security, etc.).

Add multiple instances of certain apps (e.g., Ignition, Databases).

Configure options per instance (e.g., name, ports, persistence).

Choose integrations (apps pre-wired to talk to each other).

Generate a downloadable project folder with ready-to-run docker-compose.yml, configs, .env, and helper scripts.

2. Categorized Application Catalog (UI Layout)
[ IIoT Stack Builder ]

Industrial Platforms
  [+] Ignition (Add Instance)
  [+] Ignition Edge (Add Instance)

Databases
  [ ] PostgreSQL
  [ ] MariaDB
  [ ] MSSQL
  [ ] SQLite
  [+] Add Another Database

Messaging & Brokers
  [ ] EMQX MQTT
  [ ] Mosquitto
  [ ] RabbitMQ

Automation / Workflow
  [ ] Node-RED
  [ ] n8n

Monitoring & Observability
  [ ] Prometheus
  [ ] Grafana
  [ ] Loki
  [ ] Dozzle

Authentication & Identity
  [ ] Keycloak
  [ ] Authentik
  [ ] Authelia

DevOps Tools
  [ ] Portainer
  [ ] WhatUpDocker

Security & Secrets
  [ ] Vault
  [ ] Doppler

Remote Access
  [ ] Guacamole

Networking / Proxy
  [ ] Traefik
-------------------------------------------
Integrations:
(✓) Auto-register DBs in Ignition
(✓) Configure Keycloak clients
(✓) Connect Node-RED → MQTT
(✓) Enable Prometheus scraping
(✓) Store secrets in Vault
-------------------------------------------
Preview:
  docker-compose.yml
  .env
-------------------------------------------
[Generate Project]   [Download Zip]


Apps in each category have a checkbox/toggle.

Apps like Ignition or Databases have a plus button to add multiple instances.

Clicking “Options” expands per-instance configs (ports, persistence, credentials, etc.).

3. Data Model (Proposed)
Entities

Application

id: unique identifier (e.g., ignition, postgres, grafana)

name: display name

category: grouping (e.g., Industrial, Database)

image: Docker image reference

default_config: baseline service config

options: configurable parameters (ports, persistence, env vars)

supports_multiple: boolean

integrations: list of supported integration types (e.g., db_client, oauth_client, metrics_target)

Instance

id: instance ID (ignition-1, ignition-2)

app_id: reference to application

name: friendly name (editable in UI)

config: overrides from default_config

IntegrationRule

from_app: source app (e.g., postgres)

to_app: target app (e.g., ignition)

action: what to do (e.g., write DB connection config, configure OAuth client, register metrics target)

4. Backend Logic

Catalog Manager → loads the application catalog JSON.

Template Engine → Jinja2/Handlebars templates for Docker Compose + config files.

Integration Engine → applies IntegrationRules across selected apps, auto-generates configs.

Project Generator → assembles final project folder.

5. Generated Project Folder Structure
project-stack/
│
├── docker-compose.yml          # full stack definition
├── .env                        # secrets, ports, config
├── README.md                   # usage instructions
│
├── configs/
│   ├── ignition-1/
│   │   ├── databases.xml
│   │   ├── gateway.xml
│   │   └── ...
│   ├── ignition-2/
│   ├── postgres/
│   │   └── init.sql
│   ├── keycloak/
│   │   └── realm-export.json
│   ├── traefik/
│   │   └── traefik.yml
│   └── ...
│
├── scripts/
│   ├── backup.sh               # DB backups
│   ├── restore.sh
│   ├── regenerate.sh           # rebuild configs
│   └── ...
│
└── integrations/
    ├── apply_integrations.py   # auto-wires DBs, auth, metrics
    └── ...


configs/ → per-service configs (auto-generated & editable).

scripts/ → helper scripts for backups, restores, updates.

integrations/ → logic scripts if post-generation config is needed.

6. Integration Examples

Ignition ↔ Databases

Each selected DB → entry added in Ignition databases.xml.

Ignition ↔ MQTT

Ignition transmission-config.xml updated with EMQX connection.

Grafana ↔ Databases/Prometheus

Auto-add Prometheus + SQL data sources.

Keycloak ↔ Apps

Keycloak configured with clients for Grafana, Guacamole, Vault.

Vault ↔ All Apps

Secrets stored in Vault → env vars point to Vault.

7. Deliverables

Web UI with categorized, multi-instance application selection.

Backend engine with catalog, templates, integration logic.

Downloadable project generator that outputs folder structure.

Pre-built example stacks (e.g., “Full IIoT Stack”, “Lightweight Edge Stack”).

Documentation for adding new apps to the catalog.

✅ With this, you’ll be able to spin up custom-tailored IIoT environments with multiple Ignition gateways, databases, monitoring, security, and messaging — all pre-wired and secured automatically.