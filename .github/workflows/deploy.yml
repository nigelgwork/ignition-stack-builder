name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual deployment trigger

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend image
        if: hashFiles('backend/Dockerfile') != ''
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            gaskony/ignition-stack-builder-backend:latest
            gaskony/ignition-stack-builder-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        if: hashFiles('frontend/Dockerfile') != ''
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            gaskony/ignition-stack-builder-frontend:latest
            gaskony/ignition-stack-builder-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    environment:
      name: production
      url: http://156.67.214.53:3500

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts

      - name: Create backup
        run: |
          ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /git/ignition-stack-builder
            mkdir -p backups
            docker compose exec -T auth-db pg_dump -U stack_builder stack_builder_auth > backups/backup_$(date +%Y%m%d_%H%M%S).sql
            echo "Backup created"
          EOF

      - name: Deploy to production server
        run: |
          ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /git/ignition-stack-builder
            git pull origin main
            docker compose pull backend frontend
            docker compose up -d --no-build backend frontend
            docker compose exec -T backend python migrations/001_create_initial_schema.py || true
            echo "Production deployment completed"
          EOF

      - name: Run health checks
        run: |
          sleep 15
          curl -f http://156.67.214.53:3500/ || exit 1
          echo "Health check passed"

      - name: Run smoke tests
        run: |
          # Test critical endpoints
          curl -f http://156.67.214.53:3500/ || exit 1
          curl -f http://156.67.214.53:8000/ || exit 1
          echo "Smoke tests passed"

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Production deployment successful"
          echo "Version: ${{ github.sha }}"
          echo "Deployed by: ${{ github.actor }}"
          echo "Time: $(date)"

      - name: Rollback on failure
        if: failure()
        run: |
          echo "❌ Production deployment failed - initiating rollback"
          ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /git/ignition-stack-builder
            git reset --hard HEAD^
            docker compose up -d
          EOF
          exit 1

  cleanup:
    name: Cleanup Old Resources
    runs-on: ubuntu-latest
    needs: deploy-production
    if: success()

    steps:
      - name: Clean up old Docker images
        run: |
          ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            docker image prune -a -f --filter "until=72h"
            echo "Cleaned up Docker images older than 72 hours"
          EOF

      - name: Clean up old backups
        run: |
          ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /git/ignition-stack-builder/backups
            find . -name "backup_*.sql" -mtime +7 -delete
            echo "Cleaned up backups older than 7 days"
          EOF
